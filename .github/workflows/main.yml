## Single Job Workflow focused on Docker build + publish
name: Docker Test, Build, Deploy & Publish

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # ----------------------------------------------------------
  # Job to test, build, and deploy Docker image
  # ----------------------------------------------------------
  test_and_build:
    name: Run Tests, Build Docker image, and Push
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write

    steps:
      # Step 1: Check out repository code
      - name: Check out repository code üõéÔ∏è
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx üöÄ
        uses: docker/setup-buildx-action@v3

      # Step 3: Log in to Docker registries (Docker Hub and GitHub Container Registry)
      - name: Login to Docker registries üö¢
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 4: Install Playwright browsers and other dependencies
      - name: Install Playwright browsers and dependencies
        run: |
          npm install
          npx playwright install --with-deps

      # Step 5: Run Playwright end-to-end tests (Automated Regression Testing)
      - name: Run Playwright regression tests üß™
        run: npx playwright test

      # Step 6: Build Docker image and push it to registries
      - name: Build and push üèóÔ∏è
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/docker_repository:${{ github.sha }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/docker_repository:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
            ghcr.io/${{ github.repository }}:latest


# ---------------------------------------------------------
# Multi-Job GitHub Actions Workflow for:
# Multi-Job Workflow to run TEST and then BUILD and DEPLOY to AWS EKS - Kubernetes
#
# 1. Running tests on push/pull request to main branch
# 2. Building and pushing a Docker image to DockerHub
# 3. Deploying to AWS EKS using Kubernetes manifests
# k8s/deployment.yaml: This file defines how your application should be deployed to Kubernetes ‚Äî number of replicas, container image to use, resource limits, ...
# k8s/service.yaml: This file defines how your application is exposed ‚Äî internal service, NodePort, LoadBalancer, ...
# ---------------------------------------------------------
#name: RUN TESTS (Automated Regression Test), BUILD & DEPLOY TO AWS EKS
#
## Triggers: This workflow runs on push or pull request to the `main` branch
#on:
#  push:
#    branches: [ main ]
#  pull_request:
#    branches: [ main ]
#
## Environment Variables: These are set for the entire workflow
#env:
#  APP_NAME: my-next-js-app
#  AWS_REGION: us-east-1
#  AWS_EKS_CLUSTER_NAME: my-cluster
#  IMAGE_TAG: ${{ github.sha }}
#
#jobs:
#  #----------------------------------------------------------
#  # Job 1: Run Automated Regression Tests
#  #----------------------------------------------------------
#  test:
#    name: Run Automated Regression Tests
#    runs-on: ubuntu-latest # This specifies the environment (Ubuntu VM)
#
#    steps:
#      # Job 1.1: Check out your code from GitHub
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      # Job 1.2: Set up Node.js environment
#      - name: Set up Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: '18'
#
#      # Job 1.3: Cache Node.js modules
#      - name: Install dependencies
#        run: npm ci
#
#      # Job 1.4: Install Playwright browsers and dependencies
#      - name: Install Playwright and required browsers
#        run: npx playwright install --with-deps
#
#      # Job 1.5: Type-check code with TypeScript
#      - name: Type-check with TypeScript
#        run: npx tsc --noEmit
#
#      # Job 1.6: Run unit tests
#      - name: Lint codebase
#        run: npm run lint
#
#      # Job 1.7: Run unit tests
#      - name: Run Playwright end-to-end tests
#        run: npx playwright test
#
#  # ----------------------------------------------------------
#  # Job 2: Build Docker Image & Deploy to AWS EKS (K8s)
#  # ----------------------------------------------------------
#  build-and-deploy:
#    name: Build Docker Image & Deploy to Kubernetes
#    runs-on: ubuntu-latest
#    needs: test  # Ensures tests pass before deployment
#
#    # Permissions: This job requires permissions to write to packages and read contents
#    steps:
#      # Job 2.1: Check out your code from GitHub
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      # Job 2.2: Configure AWS credentials (from GitHub Secrets)
#      - name: Configure AWS credentials for EKS
#        uses: aws-actions/configure-aws-credentials@v2
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: $AWS_REGION
#
#      # Job 2.3: Update kubeconfig to connect to your EKS cluster
#      - name: Update kubeconfig for the EKS cluster
#        run: aws eks update-kubeconfig --name $AWS_EKS_CLUSTER_NAME
#
#      # Job 2.4: Log in to DockerHub using your credentials
#      - name: Login to Docker registries üö¢
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKER_HUB_USERNAME }}
#          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
#
#      # Job 2.5: Build your Docker image from Dockerfile in the repo
#      - name: Build Docker image with commit SHA and latest tags
#        run: |
#          docker build -t $APP_NAME:$IMAGE_TAG -t $APP_NAME:latest .
#
#      # Job 2.6: Tag the image and push to DockerHub
#      - name: Tag & Push Docker image to DockerHub
#        run: |
#          docker tag $APP_NAME:$IMAGE_TAG ${{ secrets.DOCKER_HUB_USERNAME }}/$APP_NAME:$IMAGE_TAG
#          docker tag $APP_NAME:latest ${{ secrets.DOCKER_HUB_USERNAME }}/$APP_NAME:latest
#          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/$APP_NAME:$IMAGE_TAG
#          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/$APP_NAME:latest
#
#      # Job 2.7: # Step 2.7: Deploy the updated image to Kubernetes using manifests
#      - name: Deploy updated image to Kubernetes
#        run: |
#          kubectl set image deployment/$APP_NAME $APP_NAME=${{ secrets.DOCKER_HUB_USERNAME }}/$APP_NAME:$IMAGE_TAG
#          kubectl apply -f k8s/deployment.yaml
#          kubectl apply -f k8s/service.yaml
